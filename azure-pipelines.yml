trigger:
  - main  # or your default branch

pool:
  vmImage: 'ubuntu-22.04'  # Use ubuntu-22.04 for better tool compatibility

variables:
  # Update these values according to your setup
  resourceGroupName: 'app-codepush-envimo-prod-ase'
  webAppName: 'codepush'  # Replace with your Web App name
  projectSuffix: 'ap21'   # Same as used in infrastructure deployment
  azLocation: 'australiasoutheast'  # Your Azure region
  serverUrl: 'https://$(webAppName)-$(projectSuffix).azurewebsites.net'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    # Create a deployment directory
    - script: |
        mkdir -p $(Build.ArtifactStagingDirectory)/deploy
      displayName: 'Create Deployment Directory'

    # Build the API server with improved dependency handling
    - script: |
        cd api
        npm install
        npm run build
        
        # Verify express module is installed
        if [ ! -d "node_modules/express" ]; then
          echo "Express module not found! Installing dependencies again..."
          npm install express --save
        fi
        
        # Copy files to deployment directory
        mkdir -p $(Build.ArtifactStagingDirectory)/deploy
        cp -r bin $(Build.ArtifactStagingDirectory)/deploy/
        cp -r node_modules $(Build.ArtifactStagingDirectory)/deploy/
        cp package.json $(Build.ArtifactStagingDirectory)/deploy/
        cp package-lock.json $(Build.ArtifactStagingDirectory)/deploy/ 2>/dev/null || :
        cp .env.example $(Build.ArtifactStagingDirectory)/deploy/.env
        cp codepush-infrastructure.bicep $(Build.ArtifactStagingDirectory)/deploy/ 2>/dev/null || :
        
        # Generate SSL certificates for HTTPS
        mkdir -p $(Build.ArtifactStagingDirectory)/deploy/certs
        openssl req -x509 -newkey rsa:4096 -keyout $(Build.ArtifactStagingDirectory)/deploy/certs/cert.key -out $(Build.ArtifactStagingDirectory)/deploy/certs/cert.crt -days 365 -nodes -subj "/CN=codepush-ap21.azurewebsites.net"
        
        # Create a custom wrapper for package.json that ensures dependencies are installed
        cat > $(Build.ArtifactStagingDirectory)/deploy/package.json << 'EOF'
        {
          "name": "code-push-server",
          "version": "0.0.1",
          "description": "Code Push Server for App deployment",
          "main": "./bin/script/server.js",
          "scripts": {
            "start": "bash ./fix-dependencies.sh && node ./bin/script/server.js",
            "test": "echo \"Error: no test specified\" && exit 1"
          },
          "dependencies": {
            "express": "^4.17.1"
          },
          "engines": {
            "node": ">=18.0.0"
          }
        }
        EOF
        
        # Create fix-dependencies.sh to install missing dependencies
        cat > $(Build.ArtifactStagingDirectory)/deploy/fix-dependencies.sh << 'EOF'
        #!/bin/bash
        echo "Checking for Express module..."
        if [ ! -d "node_modules/express" ]; then
          echo "Express module not found! Installing dependencies..."
          npm install
        else
          echo "Express module found, continuing..."
        fi
        EOF
        chmod +x $(Build.ArtifactStagingDirectory)/deploy/fix-dependencies.sh
        
        # Verify dependencies in deployment directory
        if [ ! -d "$(Build.ArtifactStagingDirectory)/deploy/node_modules/express" ]; then
          echo "ERROR: Express module not found in deployment directory!"
          exit 1
        else
          echo "Express module successfully included in deployment package."
        fi
      displayName: 'Build API Server and Copy Files'

    # Create a deployment script with proper error handling
    - script: |
        echo "#!/bin/bash" > $(Build.ArtifactStagingDirectory)/deploy/startup.sh
        echo "cd /home/site/wwwroot" >> $(Build.ArtifactStagingDirectory)/deploy/startup.sh
        echo "export PORT=8080" >> $(Build.ArtifactStagingDirectory)/deploy/startup.sh
        echo "export NODE_ENV=production" >> $(Build.ArtifactStagingDirectory)/deploy/startup.sh
        echo "# Check if node_modules exists and install dependencies if needed" >> $(Build.ArtifactStagingDirectory)/deploy/startup.sh
        echo "if [ ! -d \"node_modules/express\" ]; then" >> $(Build.ArtifactStagingDirectory)/deploy/startup.sh
        echo "  echo 'Express module not found! Installing dependencies...'" >> $(Build.ArtifactStagingDirectory)/deploy/startup.sh
        echo "  npm install" >> $(Build.ArtifactStagingDirectory)/deploy/startup.sh
        echo "fi" >> $(Build.ArtifactStagingDirectory)/deploy/startup.sh
        echo "if [ ! -f /home/site/wwwroot/bin/script/server.js ]; then" >> $(Build.ArtifactStagingDirectory)/deploy/startup.sh
        echo "  echo 'Error: server.js not found!'" >> $(Build.ArtifactStagingDirectory)/deploy/startup.sh
        echo "  exit 1" >> $(Build.ArtifactStagingDirectory)/deploy/startup.sh
        echo "fi" >> $(Build.ArtifactStagingDirectory)/deploy/startup.sh
        echo "node ./bin/script/server.js" >> $(Build.ArtifactStagingDirectory)/deploy/startup.sh
        chmod +x $(Build.ArtifactStagingDirectory)/deploy/startup.sh
      displayName: 'Create Startup Script'

    # Create web.config for Azure with improved configuration
    - script: |
        echo '<?xml version="1.0" encoding="utf-8"?>' > $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '<configuration>' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '  <system.webServer>' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '    <webSocket enabled="false" />' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '    <handlers>' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '      <add name="iisnode" path="bin/script/server.js" verb="*" modules="iisnode" />' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '    </handlers>' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '    <rewrite>' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '      <rules>' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '        <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '          <match url="^bin/script/server.js\/debug[\/]?" />' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '        </rule>' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '        <rule name="StaticContent">' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '          <action type="Rewrite" url="public{REQUEST_URI}" />' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '        </rule>' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '        <rule name="DynamicContent">' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '          <conditions>' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True" />' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '          </conditions>' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '          <action type="Rewrite" url="bin/script/server.js" />' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '        </rule>' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '      </rules>' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '    </rewrite>' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '    <iisnode node_env="production" nodeProcessCommandLine="node" watchedFiles="*.js;iisnode.yml" loggingEnabled="true" />' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '  </system.webServer>' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
        echo '</configuration>' >> $(Build.ArtifactStagingDirectory)/deploy/web.config
      displayName: 'Create Web.config'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/deploy'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(webAppName).zip'
        replaceExistingArchive: true
      displayName: 'Archive Files'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(webAppName).zip'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish Artifacts'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: 'Deploy Job'
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download Artifacts'

    # Debug step to verify artifact location and content
    - script: |
        echo "Listing downloaded artifacts directory:"
        ls -la $(System.ArtifactsDirectory)/drop/
        echo "Verifying zip file exists:"
        if [ -f "$(System.ArtifactsDirectory)/drop/codepush.zip" ]; then
          echo "✅ codepush.zip found at expected location"
          echo "File size: $(du -h $(System.ArtifactsDirectory)/drop/codepush.zip | cut -f1)"
        else
          echo "❌ codepush.zip NOT found at expected location"
          echo "Searching for zip files:"
          find $(System.ArtifactsDirectory) -name "*.zip" -type f
        fi
      displayName: 'Debug Artifact Location'

    # Use GitHub service connection for source code checkout
    - checkout: self
      displayName: 'Checkout Source Code'
      persistCredentials: true

    # For Azure Web App deployment, use a separate Azure RM service connection
    - task: AzureWebApp@1
      inputs:
        azureSubscription: 'Codepush SC'  # Your Azure RM service connection name
        appType: 'webApp'
        appName: '$(webAppName)-$(projectSuffix)'
        package: '$(System.ArtifactsDirectory)/drop/codepush.zip'
        deploymentMethod: 'auto'
      displayName: 'Deploy Azure Web App'

    # Optional: Configure App Settings
    - task: AzureAppServiceSettings@1
      inputs:
        azureSubscription: 'Codepush SC'  # Your Azure RM service connection name
        appName: '$(webAppName)-$(projectSuffix)'
        resourceGroupName: '$(resourceGroupName)'
        appSettings: |
          [
            {
              "name": "NODE_ENV",
              "value": "production",
              "slotSetting": false
            },
            {
              "name": "STORAGE_ACCOUNT_NAME",
              "value": "$(projectSuffix)storage",
              "slotSetting": false
            },
            {
              "name": "EMULATED",
              "value": "false",
              "slotSetting": false
            },
            {
              "name": "HTTPS",
              "value": "true",
              "slotSetting": false
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "18.20.7",
              "slotSetting": false
            },
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "true",
              "slotSetting": false
            },
            {
              "name": "SERVER_URL",
              "value": "$(serverUrl)",
              "slotSetting": false
            },
            {
              "name": "CORS_ORIGIN",
              "value": "$(serverUrl)",
              "slotSetting": false
            },
            {
              "name": "LOGGING",
              "value": "true",
              "slotSetting": false
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "0",
              "slotSetting": false
            },
            {
              "name": "REDIS_HOST",
              "value": "none",
              "slotSetting": false
            },
            {
              "name": "DISABLE_REDIS",
              "value": "true",
              "slotSetting": false
            },
            {
              "name": "WEBSITES_CONTAINER_START_TIME_LIMIT",
              "value": "300",
              "slotSetting": false
            },
            {
              "name": "WEBSITES_WEBDEPLOY_USE_SCM",
              "value": "false",
              "slotSetting": false
            }
          ]
      displayName: 'Configure App Settings'