trigger:
  - main  # or your default branch

pool:
  vmImage: 'windows-2022'  # Use windows-2022 for Windows App Service deployment

variables:
  # Update these values according to your setup
  resourceGroupName: 'app-codepush-envimo-prod-ase'
  webAppName: 'codepush'  # Replace with your Web App name
  projectSuffix: 'ap21'   # Same as used in infrastructure deployment
  azLocation: 'australiasoutheast'  # Your Azure region
  serverUrl: 'https://$(webAppName)-$(projectSuffix).azurewebsites.net'
  # Specify Windows OS
  appServicePlanOS: 'Windows'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    # Create a deployment directory
    - script: |
        mkdir $(Build.ArtifactStagingDirectory)\deploy
      displayName: 'Create Deployment Directory'

    # Build the API server with improved dependency handling
    - script: |
        cd api
        call npm install
        call npm run build
        
        :: Copy files to deployment directory
        mkdir $(Build.ArtifactStagingDirectory)\deploy
        xcopy /E /Y bin $(Build.ArtifactStagingDirectory)\deploy\bin\
        xcopy /E /Y node_modules $(Build.ArtifactStagingDirectory)\deploy\node_modules\
        copy package.json $(Build.ArtifactStagingDirectory)\deploy\
        copy package-lock.json $(Build.ArtifactStagingDirectory)\deploy\ 2>nul
        copy .env.example $(Build.ArtifactStagingDirectory)\deploy\.env
        if exist codepush-infrastructure.bicep copy codepush-infrastructure.bicep $(Build.ArtifactStagingDirectory)\deploy\
        
        :: Modified package.json with custom start script
        (
        echo {
        echo   "name": "code-push-server",
        echo   "version": "0.0.1",
        echo   "main": "./bin/script/server.js",
        echo   "scripts": {
        echo     "prestart": "node install-dependencies.js",
        echo     "start": "node ./bin/script/server.js"
        echo   },
        echo   "dependencies": {
        echo     "express": "^4.17.1",
        echo     "body-parser": "^1.19.0",
        echo     "cookie-parser": "^1.4.5",
        echo     "morgan": "^1.10.0",
        echo     "request": "^2.88.2"
        echo   },
        echo   "engines": {
        echo     "node": ">=18.0.0"
        echo   }
        echo }
        ) > $(Build.ArtifactStagingDirectory)\deploy\package.json
        
        :: Create dependency installer for Windows
        (
        echo const fs = require('fs');
        echo const { execSync } = require('child_process');
        echo.
        echo console.log('Windows Node.js environment - Checking dependencies...');
        echo console.log('Current directory:', process.cwd());
        echo.
        echo try {
        echo   require.resolve('express');
        echo   console.log('Express module found, continuing startup');
        echo } catch (e) {
        echo   console.log('Express module not found, installing dependencies...');
        echo   try {
        echo     console.log(execSync('npm install --production').toString());
        echo     console.log('Dependencies installed successfully');
        echo   } catch (err) {
        echo     console.error('Failed to install dependencies:', err);
        echo     process.exit(1);
        echo   }
        echo }
        ) > $(Build.ArtifactStagingDirectory)\deploy\install-dependencies.js
        
        :: Create web.config for Windows IIS
        (
        echo ^<?xml version="1.0" encoding="utf-8"?^>
        echo ^<configuration^>
        echo   ^<system.webServer^>
        echo     ^<webSocket enabled="false" /^>
        echo     ^<handlers^>
        echo       ^<add name="iisnode" path="bin\script\server.js" verb="*" modules="iisnode" /^>
        echo     ^</handlers^>
        echo     ^<rewrite^>
        echo       ^<rules^>
        echo         ^<rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true"^>
        echo           ^<match url="^bin\script\server.js\/debug[\/]?" /^>
        echo         ^</rule^>
        echo         ^<rule name="StaticContent"^>
        echo           ^<action type="Rewrite" url="public{REQUEST_URI}" /^>
        echo         ^</rule^>
        echo         ^<rule name="DynamicContent"^>
        echo           ^<conditions^>
        echo             ^<add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True" /^>
        echo           ^</conditions^>
        echo           ^<action type="Rewrite" url="bin\script\server.js" /^>
        echo         ^</rule^>
        echo       ^</rules^>
        echo     ^</rewrite^>
        echo     ^<iisnode nodeProcessCommandLine="node.exe" watchedFiles="*.js;node_modules\*;bin\*" loggingEnabled="true" /^>
        echo   ^</system.webServer^>
        echo ^</configuration^>
        ) > $(Build.ArtifactStagingDirectory)\deploy\web.config
        
        :: Create server startup wrapper
        (
        echo #!/usr/bin/env node
        echo.
        echo console.log('Starting code-push-server with dependency check...');
        echo.
        echo // First check if express exists
        echo try {
        echo   require.resolve('express');
        echo   console.log('Express module found, continuing startup');
        echo } catch (e) {
        echo   console.log('Express module not found, installing dependencies...');
        echo   const { execSync } = require('child_process');
        echo   try {
        echo     console.log(execSync('npm install --production').toString());
        echo     console.log('Dependencies installed successfully');
        echo   } catch (err) {
        echo     console.error('Failed to install dependencies:', err);
        echo     process.exit(1);
        echo   }
        echo }
        echo.
        echo // Start the actual server
        echo try {
        echo   require('./bin/script/server.js');
        echo } catch (err) {
        echo   console.error('Error starting server:', err);
        echo   process.exit(1);
        echo }
        ) > $(Build.ArtifactStagingDirectory)\deploy\server.js
        
        :: Create fix-dependencies.sh script
        (
        echo #!/bin/bash
        echo "----------------------------------------------------"
        echo "CodePush Server: Checking dependencies before startup"
        echo "----------------------------------------------------"
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        echo "ls -la"
        echo.
        echo "Checking for Express module..."
        echo "if [ ! -d "node_modules/express" ]; then"
        echo "  echo "EXPRESS MODULE NOT FOUND! Installing dependencies...""
        echo "  npm install express --save"
        echo "  if [ ! -d "node_modules/express" ]; then"
        echo "    echo "Express still not found after npm install. Trying again with full dependencies...""
        echo "    npm install"
        echo "    if [ ! -d "node_modules/express" ]; then"
        echo "      echo "CRITICAL: Express module still missing after multiple install attempts""
        echo "      echo "Creating node_modules directory and installing express directly""
        echo "      mkdir -p node_modules"
        echo "      cd node_modules"
        echo "      # Install express manually"
        echo "      npm install express@4.17.1 --no-save"
        echo "      cd .."
        echo "    fi"
        echo "  fi"
        echo "else"
        echo "  echo "Express module found, continuing...""
        echo "fi"
        echo "----------------------------------------------------"
        echo "Environment variables:"
        echo "env | sort"
        echo "----------------------------------------------------"
        ) > $(Build.ArtifactStagingDirectory)\deploy\fix-dependencies.sh
        
        :: Generate SSL certificates for HTTPS
        mkdir $(Build.ArtifactStagingDirectory)\deploy\certs
        openssl req -x509 -newkey rsa:4096 -keyout $(Build.ArtifactStagingDirectory)\deploy\certs\cert.key -out $(Build.ArtifactStagingDirectory)\deploy\certs\cert.crt -days 365 -nodes -subj "/CN=codepush-ap21.azurewebsites.net"
        
        :: Verify dependencies in deployment directory
        if not exist "$(Build.ArtifactStagingDirectory)\deploy\node_modules\express" (
          echo ERROR: Express module not found in deployment directory!
          exit 1
        ) else (
          echo Express module successfully included in deployment package.
        )
      displayName: 'Build API Server and Copy Files'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)\deploy'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)\$(webAppName).zip'
        replaceExistingArchive: true
      displayName: 'Archive Files'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)\$(webAppName).zip'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish Artifacts'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: 'Deploy Job'
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download Artifacts'

    # For Azure Web App deployment, use a separate Azure RM service connection
    - task: AzureWebApp@1
      inputs:
        azureSubscription: 'Codepush SC'  # Your Azure RM service connection name
        appType: 'webApp'
        appName: '$(webAppName)-$(projectSuffix)'
        package: '$(System.ArtifactsDirectory)/drop/codepush.zip'
        deploymentMethod: 'auto'
      displayName: 'Deploy Azure Web App'

    # Create the Windows App Service if it doesn't exist
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Codepush SC'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Check if the app service plan exists
          APP_SERVICE_PLAN_EXISTS=$(az appservice plan show --name $(webAppName)-plan --resource-group $(resourceGroupName) --query "name" --output tsv 2>/dev/null || echo "")
          
          # Create an App Service Plan if it doesn't exist
          if [ -z "$APP_SERVICE_PLAN_EXISTS" ]; then
            echo "Creating Windows App Service Plan..."
            az appservice plan create --name $(webAppName)-plan --resource-group $(resourceGroupName) --sku S1 --is-linux false
          else
            echo "App Service Plan already exists."
          fi
          
          # Check if the web app exists
          WEBAPP_EXISTS=$(az webapp show --name $(webAppName)-$(projectSuffix) --resource-group $(resourceGroupName) --query "name" --output tsv 2>/dev/null || echo "")
          
          # Create the web app if it doesn't exist
          if [ -z "$WEBAPP_EXISTS" ]; then
            echo "Creating Windows Web App..."
            az webapp create --name $(webAppName)-$(projectSuffix) --resource-group $(resourceGroupName) --plan $(webAppName)-plan --runtime "NODE|18-lts"
          else
            echo "Web App already exists."
          fi
      displayName: 'Ensure Windows App Service Exists'

    # Optional: Configure App Settings
    - task: AzureAppServiceSettings@1
      inputs:
        azureSubscription: 'Codepush SC'  # Your Azure RM service connection name
        appName: '$(webAppName)-$(projectSuffix)'
        resourceGroupName: '$(resourceGroupName)'
        appSettings: |
          [
            {
              "name": "NODE_ENV",
              "value": "production",
              "slotSetting": false
            },
            {
              "name": "STORAGE_ACCOUNT_NAME",
              "value": "$(projectSuffix)storage",
              "slotSetting": false
            },
            {
              "name": "EMULATED",
              "value": "false",
              "slotSetting": false
            },
            {
              "name": "HTTPS",
              "value": "true",
              "slotSetting": false
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "18.20.7",
              "slotSetting": false
            },
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "true",
              "slotSetting": false
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "0", 
              "slotSetting": false
            },
            {
              "name": "NODE_PENDING_PIPE_INSTANCES",
              "value": "25",
              "slotSetting": false
            },
            {
              "name": "WEBSITE_OVERRIDE_NODE_DEFAULT_VERSION",
              "value": "18.20.7",
              "slotSetting": false
            },
            {
              "name": "SERVER_URL",
              "value": "$(serverUrl)",
              "slotSetting": false
            },
            {
              "name": "CORS_ORIGIN",
              "value": "$(serverUrl)",
              "slotSetting": false
            },
            {
              "name": "LOGGING",
              "value": "true",
              "slotSetting": false
            },
            {
              "name": "REDIS_HOST",
              "value": "none",
              "slotSetting": false
            },
            {
              "name": "DISABLE_REDIS",
              "value": "true",
              "slotSetting": false
            },
            {
              "name": "WEBSITES_WEBDEPLOY_USE_SCM",
              "value": "false",
              "slotSetting": false
            },
            {
              "name": "COMMAND_LINE_ARGS",
              "value": "server.js",
              "slotSetting": false
            }
          ]
      displayName: 'Configure App Settings'