trigger:
  - main  # or your default branch

pool:
  vmImage: 'windows-2022'  # Use windows-2022 for Windows App Service deployment

variables:
  # Update these values according to your setup
  resourceGroupName: 'app-codepush-envimo-prod-ase'
  webAppName: 'codepush'  # Replace with your Web App name
  projectSuffix: 'ap21'   # Same as used in infrastructure deployment
  azLocation: 'australiasoutheast'  # Your Azure region
  serverUrl: 'https://$(webAppName)-$(projectSuffix).azurewebsites.net'
  # Specify Windows OS
  appServicePlanOS: 'Windows'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    # Create a deployment directory
    - script: |
        mkdir -p $(Build.ArtifactStagingDirectory)/deploy
      displayName: 'Create Deployment Directory'

    # Build the API server with improved dependency handling
    - script: |
        cd api
        npm install
        npm run build
        
        # Copy files to deployment directory
        mkdir -p $(Build.ArtifactStagingDirectory)/deploy
        cp -r bin $(Build.ArtifactStagingDirectory)/deploy/
        cp -r node_modules $(Build.ArtifactStagingDirectory)/deploy/
        cp package.json $(Build.ArtifactStagingDirectory)/deploy/
        cp package-lock.json $(Build.ArtifactStagingDirectory)/deploy/ 2>/dev/null || :
        cp .env.example $(Build.ArtifactStagingDirectory)/deploy/.env
        cp codepush-infrastructure.bicep $(Build.ArtifactStagingDirectory)/deploy/ 2>/dev/null || :
        
        # Modified package.json with custom start script
        cat > $(Build.ArtifactStagingDirectory)/deploy/package.json << 'EOF'
        {
          "name": "code-push-server",
          "version": "0.0.1",
          "main": "./bin/script/server.js",
          "scripts": {
            "prestart": "node install-dependencies.js",
            "start": "node ./bin/script/server.js"
          },
          "dependencies": {
            "express": "^4.17.1",
            "body-parser": "^1.19.0",
            "cookie-parser": "^1.4.5",
            "morgan": "^1.10.0",
            "request": "^2.88.2"
          },
          "engines": {
            "node": ">=18.0.0"
          }
        }
        EOF
        
        # Create dependency installer for Windows
        cat > $(Build.ArtifactStagingDirectory)/deploy/install-dependencies.js << 'EOF'
        const fs = require('fs');
        const { execSync } = require('child_process');

        console.log('Windows Node.js environment - Checking dependencies...');
        console.log('Current directory:', process.cwd());
        
        try {
          require.resolve('express');
          console.log('Express module found, continuing startup');
        } catch (e) {
          console.log('Express module not found, installing dependencies...');
          try {
            console.log(execSync('npm install --production').toString());
            console.log('Dependencies installed successfully');
          } catch (err) {
            console.error('Failed to install dependencies:', err);
            process.exit(1);
          }
        }
        EOF
        
        # Create web.config for Windows IIS
        cat > $(Build.ArtifactStagingDirectory)/deploy/web.config << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <webSocket enabled="false" />
            <handlers>
              <add name="iisnode" path="bin/script/server.js" verb="*" modules="iisnode" />
            </handlers>
            <rewrite>
              <rules>
                <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                  <match url="^bin/script/server.js\/debug[\/]?" />
                </rule>
                <rule name="StaticContent">
                  <action type="Rewrite" url="public{REQUEST_URI}" />
                </rule>
                <rule name="DynamicContent">
                  <conditions>
                    <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True" />
                  </conditions>
                  <action type="Rewrite" url="bin/script/server.js" />
                </rule>
              </rules>
            </rewrite>
            <iisnode nodeProcessCommandLine="node.exe" watchedFiles="*.js;node_modules\*;bin\*" loggingEnabled="true" />
          </system.webServer>
        </configuration>
        EOF
        
        # Create server startup wrapper
        cat > $(Build.ArtifactStagingDirectory)/deploy/server.js << 'EOF'
        #!/usr/bin/env node
        
        console.log('Starting code-push-server with dependency check...');
        
        // First check if express exists
        try {
          require.resolve('express');
          console.log('Express module found, continuing startup');
        } catch (e) {
          console.log('Express module not found, installing dependencies...');
          const { execSync } = require('child_process');
          try {
            console.log(execSync('npm install --production').toString());
            console.log('Dependencies installed successfully');
          } catch (err) {
            console.error('Failed to install dependencies:', err);
            process.exit(1);
          }
        }
        
        // Start the actual server
        try {
          require('./bin/script/server.js');
        } catch (err) {
          console.error('Error starting server:', err);
          process.exit(1);
        }
        EOF
        
        # Create fix-dependencies.sh script
        cat > $(Build.ArtifactStagingDirectory)/deploy/fix-dependencies.sh << 'EOF'
        #!/bin/bash
        echo "----------------------------------------------------"
        echo "CodePush Server: Checking dependencies before startup"
        echo "----------------------------------------------------"
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        
        echo "Checking for Express module..."
        if [ ! -d "node_modules/express" ]; then
          echo "EXPRESS MODULE NOT FOUND! Installing dependencies..."
          npm install express --save
          if [ ! -d "node_modules/express" ]; then
            echo "Express still not found after npm install. Trying again with full dependencies..."
            npm install
            if [ ! -d "node_modules/express" ]; then
              echo "CRITICAL: Express module still missing after multiple install attempts"
              echo "Creating node_modules directory and installing express directly"
              mkdir -p node_modules
              cd node_modules
              # Install express manually
              npm install express@4.17.1 --no-save
              cd ..
            fi
          fi
        else
          echo "Express module found, continuing..."
        fi
        echo "----------------------------------------------------"
        echo "Environment variables:"
        env | sort
        echo "----------------------------------------------------"
        EOF
        chmod +x $(Build.ArtifactStagingDirectory)/deploy/fix-dependencies.sh
        
        # Generate SSL certificates for HTTPS
        mkdir -p $(Build.ArtifactStagingDirectory)/deploy/certs
        openssl req -x509 -newkey rsa:4096 -keyout $(Build.ArtifactStagingDirectory)/deploy/certs/cert.key -out $(Build.ArtifactStagingDirectory)/deploy/certs/cert.crt -days 365 -nodes -subj "/CN=codepush-ap21.azurewebsites.net"
        
        # Verify dependencies in deployment directory
        if [ ! -d "$(Build.ArtifactStagingDirectory)/deploy/node_modules/express" ]; then
          echo "ERROR: Express module not found in deployment directory!"
          exit 1
        else
          echo "Express module successfully included in deployment package."
        fi
      displayName: 'Build API Server and Copy Files'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/deploy'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(webAppName).zip'
        replaceExistingArchive: true
      displayName: 'Archive Files'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(webAppName).zip'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish Artifacts'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: 'Deploy Job'
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download Artifacts'

    # For Azure Web App deployment, use a separate Azure RM service connection
    - task: AzureWebApp@1
      inputs:
        azureSubscription: 'Codepush SC'  # Your Azure RM service connection name
        appType: 'webApp'
        appName: '$(webAppName)-$(projectSuffix)'
        package: '$(System.ArtifactsDirectory)/drop/codepush.zip'
        deploymentMethod: 'auto'
      displayName: 'Deploy Azure Web App'

    # Create the Windows App Service if it doesn't exist
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Codepush SC'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Check if the app service plan exists
          APP_SERVICE_PLAN_EXISTS=$(az appservice plan show --name $(webAppName)-plan --resource-group $(resourceGroupName) --query "name" --output tsv 2>/dev/null || echo "")
          
          # Create an App Service Plan if it doesn't exist
          if [ -z "$APP_SERVICE_PLAN_EXISTS" ]; then
            echo "Creating Windows App Service Plan..."
            az appservice plan create --name $(webAppName)-plan --resource-group $(resourceGroupName) --sku S1 --is-linux false
          else
            echo "App Service Plan already exists."
          fi
          
          # Check if the web app exists
          WEBAPP_EXISTS=$(az webapp show --name $(webAppName)-$(projectSuffix) --resource-group $(resourceGroupName) --query "name" --output tsv 2>/dev/null || echo "")
          
          # Create the web app if it doesn't exist
          if [ -z "$WEBAPP_EXISTS" ]; then
            echo "Creating Windows Web App..."
            az webapp create --name $(webAppName)-$(projectSuffix) --resource-group $(resourceGroupName) --plan $(webAppName)-plan --runtime "NODE|18-lts"
          else
            echo "Web App already exists."
          fi
      displayName: 'Ensure Windows App Service Exists'

    # Optional: Configure App Settings
    - task: AzureAppServiceSettings@1
      inputs:
        azureSubscription: 'Codepush SC'  # Your Azure RM service connection name
        appName: '$(webAppName)-$(projectSuffix)'
        resourceGroupName: '$(resourceGroupName)'
        appSettings: |
          [
            {
              "name": "NODE_ENV",
              "value": "production",
              "slotSetting": false
            },
            {
              "name": "STORAGE_ACCOUNT_NAME",
              "value": "$(projectSuffix)storage",
              "slotSetting": false
            },
            {
              "name": "EMULATED",
              "value": "false",
              "slotSetting": false
            },
            {
              "name": "HTTPS",
              "value": "true",
              "slotSetting": false
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "18.20.7",
              "slotSetting": false
            },
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "true",
              "slotSetting": false
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "0", 
              "slotSetting": false
            },
            {
              "name": "NODE_PENDING_PIPE_INSTANCES",
              "value": "25",
              "slotSetting": false
            },
            {
              "name": "WEBSITE_OVERRIDE_NODE_DEFAULT_VERSION",
              "value": "18.20.7",
              "slotSetting": false
            },
            {
              "name": "SERVER_URL",
              "value": "$(serverUrl)",
              "slotSetting": false
            },
            {
              "name": "CORS_ORIGIN",
              "value": "$(serverUrl)",
              "slotSetting": false
            },
            {
              "name": "LOGGING",
              "value": "true",
              "slotSetting": false
            },
            {
              "name": "REDIS_HOST",
              "value": "none",
              "slotSetting": false
            },
            {
              "name": "DISABLE_REDIS",
              "value": "true",
              "slotSetting": false
            },
            {
              "name": "WEBSITES_WEBDEPLOY_USE_SCM",
              "value": "false",
              "slotSetting": false
            },
            {
              "name": "COMMAND_LINE_ARGS",
              "value": "server.js",
              "slotSetting": false
            }
          ]
      displayName: 'Configure App Settings'