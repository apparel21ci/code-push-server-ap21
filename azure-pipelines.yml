trigger:
  - main

pool:
  vmImage: 'ubuntu-22.04'  # Use ubuntu-22.04 for better tool compatibility

variables:
  resourceGroupName: 'app-codepush-envimo-prod-ase'
  webAppName: 'codepush'
  projectSuffix: 'ap21'
  azLocation: 'australiasoutheast'
  serverUrl: 'https://$(webAppName)-$(projectSuffix).azurewebsites.net'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    # Build the API server
    - script: |
        cd api
        npm install
        # Ensure all required dependencies are installed
        npm install --no-save express semver body-parser cookie-parser morgan request stream-to-array @azure/data-tables @azure/identity @azure/keyvault-secrets @azure/storage-blob @azure/storage-queue applicationinsights cookie-session ejs email-validator express-domain-middleware express-rate-limit multer node-deepcopy passport passport-azure-ad passport-github2 passport-http-bearer passport-windowslive q redis sanitize-html shortid streamifier superagent try-json yauzl yazl
        npm run build
      displayName: 'Install dependencies and build'

    # Create deployment package
    - bash: |
        # Create deployment directory
        mkdir -p $(Build.ArtifactStagingDirectory)/deploy
        
        # Copy required files
        cp -r api/bin $(Build.ArtifactStagingDirectory)/deploy/
        cp -r api/node_modules $(Build.ArtifactStagingDirectory)/deploy/
        cp api/package.json $(Build.ArtifactStagingDirectory)/deploy/
        cp api/package-lock.json $(Build.ArtifactStagingDirectory)/deploy/
        cp api/.env.example $(Build.ArtifactStagingDirectory)/deploy/.env
        
        # Install all required dependencies explicitly to ensure they're included
        cd $(Build.ArtifactStagingDirectory)/deploy
        
        # First, clean any potentially corrupted semver installation
        rm -rf node_modules/semver
        
        # Install a specific version of semver known to work correctly
        npm install --no-save semver@7.3.8
        
        # Install other dependencies
        npm install --no-save express body-parser cookie-parser morgan request stream-to-array @azure/data-tables @azure/identity @azure/keyvault-secrets @azure/storage-blob @azure/storage-queue applicationinsights cookie-session ejs email-validator express-domain-middleware express-rate-limit multer node-deepcopy passport passport-azure-ad passport-github2 passport-http-bearer passport-windowslive q redis sanitize-html shortid streamifier superagent try-json yauzl yazl
        
        # Generate self-signed certificates for SSL
        mkdir -p $(Build.ArtifactStagingDirectory)/deploy/certs
        
        # Create OpenSSL config file for SAN certificate
        cat > $(Build.ArtifactStagingDirectory)/deploy/openssl.cnf << 'EOF'
        [req]
        default_bits = 2048
        prompt = no
        default_md = sha256
        distinguished_name = dn
        req_extensions = req_ext
        
        [dn]
        CN = codepush-ap21.azurewebsites.net
        
        [req_ext]
        subjectAltName = @alt_names
        
        [alt_names]
        DNS.1 = codepush-ap21.azurewebsites.net
        DNS.2 = localhost
        EOF
        
        # Generate certificate with Subject Alternative Names (SAN)
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout $(Build.ArtifactStagingDirectory)/deploy/certs/cert.key \
          -out $(Build.ArtifactStagingDirectory)/deploy/certs/cert.pem \
          -config $(Build.ArtifactStagingDirectory)/deploy/openssl.cnf \
          -extensions req_ext
        
        echo "Self-signed certificates with SAN generated successfully"
        
        # Create simplified server.js entry point with dependency check
        cat > $(Build.ArtifactStagingDirectory)/deploy/server.js << 'EOF'
        console.log('Starting code-push-server...');

        const { execSync } = require('child_process');

        // Check for required dependencies
        const missingDeps = [];
        const requiredDeps = [
          'express', 
          'semver', 
          'body-parser', 
          'cookie-parser', 
          'morgan', 
          'request',
          'stream-to-array',
          '@azure/data-tables',
          '@azure/identity',
          '@azure/keyvault-secrets',
          '@azure/storage-blob',
          '@azure/storage-queue',
          'applicationinsights',
          'cookie-session',
          'ejs',
          'email-validator',
          'express-domain-middleware',
          'express-rate-limit',
          'multer',
          'node-deepcopy',
          'passport',
          'passport-azure-ad',
          'passport-github2',
          'passport-http-bearer',
          'passport-windowslive',
          'q',
          'redis',
          'sanitize-html',
          'shortid',
          'streamifier',
          'superagent',
          'try-json',
          'yauzl',
          'yazl'
        ];

        for (const dep of requiredDeps) {
          try {
            require.resolve(dep);
            console.log(`${dep} module found`);
          } catch (e) {
            console.log(`${dep} module not found, will install`);
            missingDeps.push(dep);
          }
        }

        // Install any missing dependencies
        if (missingDeps.length > 0) {
          try {
            console.log(`Installing missing dependencies: ${missingDeps.join(', ')}`);
            // First try to install using npm
            try {
              execSync(`npm install --no-save ${missingDeps.join(' ')}`, { stdio: 'inherit' });
              console.log('Dependencies installed successfully');
            } catch (npmError) {
              console.error('Error installing dependencies with npm:', npmError);
              // Fallback to using a pre-installed node_modules directory
              console.log('Attempting to use pre-installed modules...');
            }
          } catch (error) {
            console.error('Error handling dependencies:', error);
            // Continue anyway - the app might still work if the modules are in node_modules
          }
        }

        // Start the main server script
        try {
          require('./bin/script/server');
        } catch (error) {
          console.error('Error starting server:', error);
          // Log more details about the error
          if (error.code === 'MODULE_NOT_FOUND') {
            console.error('Module not found details:', error.requireStack);
          }
          process.exit(1);
        }
        EOF
        
        # Verify key modules are present
        if [ ! -d "$(Build.ArtifactStagingDirectory)/deploy/node_modules/express" ] || [ ! -d "$(Build.ArtifactStagingDirectory)/deploy/node_modules/stream-to-array" ]; then
          echo "Required modules not found in deployment directory!"
          exit 1
        else
          echo "Required modules successfully included in deployment package."
        fi
        
        # Create a package.json with all dependencies
        cat > $(Build.ArtifactStagingDirectory)/deploy/package.json << 'EOF'
        {
          "name": "code-push-server",
          "version": "0.5.0",
          "description": "CodePush server",
          "main": "server.js",
          "scripts": {
            "start": "node server.js"
          },
          "engines": {
            "node": ">=18.0.0",
            "npm": ">=9.0.0"
          },
          "dependencies": {
            "@azure/data-tables": "^13.2.2",
            "@azure/identity": "^4.2.1",
            "@azure/keyvault-secrets": "^4.7.0",
            "@azure/storage-blob": "^12.14.0",
            "@azure/storage-queue": "^12.13.0",
            "applicationinsights": "^2.7.0",
            "body-parser": "^1.20.2",
            "cookie-session": "^2.0.0",
            "cookie-parser": "^1.4.5",
            "ejs": "^3.1.10",
            "email-validator": "1.0.3",
            "express": "^4.21.2",
            "express-domain-middleware": "0.1.0",
            "express-rate-limit": "^7.4.0",
            "morgan": "^1.10.0",
            "multer": "^1.4.5-lts.1",
            "node-deepcopy": "0.1.1",
            "passport": "^0.6.0",
            "passport-azure-ad": "^4.3.5",
            "passport-github2": "0.1.9",
            "passport-http-bearer": "1.0.1",
            "passport-windowslive": "1.0.1",
            "q": "^1.4.1",
            "redis": "2.4.2",
            "request": "^2.88.2",
            "sanitize-html": "^2.11.0",
            "semver": "^7.5.3",
            "shortid": "2.2.2",
            "stream-to-array": "^2.3.0",
            "streamifier": "0.1.1",
            "superagent": "^8.0.9",
            "try-json": "1.0.0",
            "yauzl": "2.6.0",
            "yazl": "2.2.2"
          }
        }
        EOF
        
        # Create web.config for Azure
        cat > $(Build.ArtifactStagingDirectory)/deploy/web.config << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <webSocket enabled="false" />
            <handlers>
              <add name="iisnode" path="server.js" verb="*" modules="iisnode" />
            </handlers>
            <rewrite>
              <rules>
                <rule name="StaticContent">
                  <action type="Rewrite" url="public{REQUEST_URI}" />
                </rule>
                <rule name="DynamicContent">
                  <conditions>
                    <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True" />
                  </conditions>
                  <action type="Rewrite" url="server.js" />
                </rule>
              </rules>
            </rewrite>
            <iisnode nodeProcessCommandLine="node" watchedFiles="*.js;node_modules\*;bin\*" loggingEnabled="true" />
          </system.webServer>
        </configuration>
        EOF
        
        # Create .deployment file to disable build
        cat > $(Build.ArtifactStagingDirectory)/deploy/.deployment << 'EOF'
        [config]
        SCM_DO_BUILD_DURING_DEPLOYMENT=false
        EOF
      displayName: 'Create Deployment Package'

    # Archive for deployment
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/deploy'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(webAppName).zip'
        replaceExistingArchive: true
      displayName: 'Archive Files'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(webAppName).zip'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish Artifacts'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: 'Deploy Job'
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download Artifacts'

    # Prepare for App Service creation
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Codepush SC'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Verify resource group exists
          echo "Verifying resource group exists..."
          resourceGroupName="$(resourceGroupName)"
          resourceGroupExists=$(az group show --name "$resourceGroupName" --query "name" --output tsv 2>/dev/null || echo "")
          if [ -z "$resourceGroupExists" ]; then
            echo "Resource group '$resourceGroupName' does not exist. Creating it..."
            az group create --name "$resourceGroupName" --location "$(azLocation)"
          else
            echo "Resource group '$resourceGroupName' exists."
          fi
          
          # List all app service plans in the subscription to debug
          echo "Listing all App Service Plans in the subscription:"
          az appservice plan list --query "[].{name:name, resourceGroup:resourceGroup, id:id}" -o table
          
          # Delete existing web app if it exists
          webAppName="$(webAppName)-$(projectSuffix)"
          echo "Checking if Web App '$webAppName' exists in resource group '$resourceGroupName'..."
          webAppExists=$(az webapp list --resource-group "$resourceGroupName" --query "[?name=='$webAppName'].name" --output tsv 2>/dev/null || echo "")
          
          if [ -n "$webAppExists" ]; then
            echo "Deleting existing web app '$webAppName' to ensure clean deployment..."
            az webapp delete --name "$webAppName" --resource-group "$resourceGroupName"
            # Wait for deletion to complete
            sleep 15
          fi
          
          # Create or ensure App Service Plan exists
          appServicePlanName="$(webAppName)-plan-linux"
          echo "Checking if App Service Plan '$appServicePlanName' exists..."
          appServicePlanExists=$(az appservice plan list --resource-group "$resourceGroupName" --query "[?name=='$appServicePlanName'].name" --output tsv 2>/dev/null || echo "")
          
          if [ -z "$appServicePlanExists" ]; then
            echo "Creating App Service Plan '$appServicePlanName'..."
            az appservice plan create --name "$appServicePlanName" --resource-group "$resourceGroupName" --is-linux --sku S1 --location "$(azLocation)"
          else
            echo "App Service Plan '$appServicePlanName' already exists."
          fi
          
          # Create the web app
          echo "Creating Web App '$webAppName'..."
          az webapp create --name "$webAppName" --resource-group "$resourceGroupName" --plan "$appServicePlanName" --runtime "NODE:18-lts"
          
          # Configure app settings
          echo "Configuring app settings..."
          az webapp config appsettings set --name "$webAppName" --resource-group "$resourceGroupName" --settings \
            NODE_ENV=production \
            STORAGE_ACCOUNT_NAME="$(projectSuffix)storage" \
            EMULATED=false \
            HTTPS=false \
            WEBSITES_PORT=8080 \
            SERVER_URL="$(serverUrl)" \
            CORS_ORIGIN="$(serverUrl)" \
            LOGGING=true \
            REDIS_HOST=none \
            DISABLE_REDIS=true \
            SCM_DO_BUILD_DURING_DEPLOYMENT=true \
            WEBSITE_NODE_DEFAULT_VERSION=~18 \
            WEBSITE_RUN_FROM_PACKAGE=0
          
          # Set startup command
          echo "Setting startup command..."
          az webapp config set --name "$webAppName" --resource-group "$resourceGroupName" --startup-file "node server.js"
      displayName: 'Create and Configure Azure Web App'

    # Deploy to the web app
    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'Codepush SC'
        appType: 'webAppLinux'
        WebAppName: '$(webAppName)-$(projectSuffix)'
        packageForLinux: '$(System.ArtifactsDirectory)/drop/$(webAppName).zip'
        RuntimeStack: 'NODE|18-lts'
        StartupCommand: 'node server.js'
        DeploymentType: 'zipDeploy'
        TakeAppOfflineFlag: true
        ExcludeFilesFromAppDataFlag: true
        RemoveAdditionalFilesFlag: true
      displayName: 'Deploy to Azure Web App'

    # Verify deployment
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Codepush SC'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          webAppName="$(webAppName)-$(projectSuffix)"
          resourceGroupName="$(resourceGroupName)"
          
          echo "Verifying deployment..."
          status=$(az webapp show --name "$webAppName" --resource-group "$resourceGroupName" --query "state" -o tsv 2>/dev/null || echo "Not found")
          echo "Web app status: $status"
          
          if [ "$status" = "Not found" ]; then
            echo "Web app was not created successfully."
            exit 1
          fi
          
          echo "App Service URL: $(serverUrl)"
          
          # Restart the web app to ensure all settings are applied
          echo "Restarting web app to apply all settings..."
          az webapp restart --name "$webAppName" --resource-group "$resourceGroupName"
      displayName: 'Verify Deployment'