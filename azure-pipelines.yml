trigger:
  - main

pool:
  vmImage: 'windows-2022'

variables:
  resourceGroupName: 'app-codepush-envimo-prod-ase'
  webAppName: 'codepush'
  projectSuffix: 'ap21'
  azLocation: 'australiasoutheast'
  serverUrl: 'https://$(webAppName)-$(projectSuffix).azurewebsites.net'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    # Build the API server
    - script: |
        cd api
        call npm install
        call npm run build
      displayName: 'Build API Server'

    # Create and populate deployment directory
    - task: CopyFiles@2
      inputs:
        SourceFolder: 'api'
        Contents: |
          bin/**
          node_modules/**
          package.json
          package-lock.json
          .env.example
        TargetFolder: '$(Build.ArtifactStagingDirectory)/deploy'
        CleanTargetFolder: true
        OverWrite: true
      displayName: 'Copy API Files to Deployment Directory'

    # Rename .env.example to .env
    - script: |
        rename "$(Build.ArtifactStagingDirectory)\deploy\.env.example" ".env"
      displayName: 'Setup Environment File'

    # Create supporting files
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/api'
        Contents: |
          package.json
        TargetFolder: '$(Build.BinariesDirectory)/temp'
        flattenFolders: true
      displayName: 'Copy package.json for modification'

    # Write necessary deployment files
    - powershell: |
        # Create enhanced package.json
        $pkgJson = Get-Content -Raw -Path "$(Build.BinariesDirectory)/temp/package.json" | ConvertFrom-Json
        $pkgJson.scripts.prestart = "node install-dependencies.js" 
        $pkgJson.dependencies = @{
          "express" = "^4.17.1"
          "body-parser" = "^1.19.0"
          "cookie-parser" = "^1.4.5"
          "morgan" = "^1.10.0" 
          "request" = "^2.88.2"
        }
        $pkgJson.engines = @{ 
          "node" = ">=18.0.0" 
        }
        $pkgJson | ConvertTo-Json -Depth 10 | Set-Content -Path "$(Build.ArtifactStagingDirectory)/deploy/package.json"
        
        # Create dependency checker
        @"
        const fs = require('fs');
        const { execSync } = require('child_process');

        console.log('Windows Node.js environment - Checking dependencies...');
        console.log('Current directory:', process.cwd());
        
        try {
          require.resolve('express');
          console.log('Express module found, continuing startup');
        } catch (e) {
          console.log('Express module not found, installing dependencies...');
          try {
            console.log(execSync('npm install --production').toString());
            console.log('Dependencies installed successfully');
          } catch (err) {
            console.error('Failed to install dependencies:', err);
            process.exit(1);
          }
        }
        "@ | Set-Content -Path "$(Build.ArtifactStagingDirectory)/deploy/install-dependencies.js"
        
        # Create web.config
        @"
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <webSocket enabled="false" />
            <handlers>
              <add name="iisnode" path="bin\script\server.js" verb="*" modules="iisnode" />
            </handlers>
            <rewrite>
              <rules>
                <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                  <match url="^bin\\script\\server.js\/debug[\/]?" />
                </rule>
                <rule name="StaticContent">
                  <action type="Rewrite" url="public{REQUEST_URI}" />
                </rule>
                <rule name="DynamicContent">
                  <conditions>
                    <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True" />
                  </conditions>
                  <action type="Rewrite" url="bin\script\server.js" />
                </rule>
              </rules>
            </rewrite>
            <iisnode nodeProcessCommandLine="node.exe" watchedFiles="*.js;node_modules\*;bin\*" loggingEnabled="true" />
          </system.webServer>
        </configuration>
        "@ | Set-Content -Path "$(Build.ArtifactStagingDirectory)/deploy/web.config"
        
        # Verify express is present
        if (-not (Test-Path "$(Build.ArtifactStagingDirectory)/deploy/node_modules/express")) {
          Write-Error "EXPRESS MODULE NOT FOUND in deployment directory!"
          exit 1
        } else {
          Write-Host "Express module successfully included in deployment package."
        }
      displayName: 'Create Deployment Supporting Files'
      
    # Generate SSL certificates
    - script: |
        mkdir $(Build.ArtifactStagingDirectory)\deploy\certs
        openssl req -x509 -newkey rsa:4096 -keyout $(Build.ArtifactStagingDirectory)\deploy\certs\cert.key -out $(Build.ArtifactStagingDirectory)\deploy\certs\cert.crt -days 365 -nodes -subj "/CN=codepush-ap21.azurewebsites.net"
      displayName: 'Generate SSL Certificates'

    # Archive for deployment
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/deploy'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(webAppName).zip'
        replaceExistingArchive: true
      displayName: 'Archive Files'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(webAppName).zip'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish Artifacts'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: 'Deploy Job'
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download Artifacts'

    # Ensure Windows App Service exists
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Codepush SC'
        scriptType: 'powershell'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Check if the app service plan exists
          $appServicePlanExists = $null
          try {
            $appServicePlanExists = az appservice plan show --name "$(webAppName)-plan" --resource-group "$(resourceGroupName)" --query "name" --output tsv
          } catch {}
          
          # Create App Service Plan if needed
          if (-not $appServicePlanExists) {
            Write-Host "Creating Windows App Service Plan..."
            az appservice plan create --name "$(webAppName)-plan" --resource-group "$(resourceGroupName)" --sku S1 --is-linux false
          } else {
            Write-Host "App Service Plan already exists."
          }
          
          # Check if the web app exists
          $webAppExists = $null
          try {
            $webAppExists = az webapp show --name "$(webAppName)-$(projectSuffix)" --resource-group "$(resourceGroupName)" --query "name" --output tsv
          } catch {}
          
          # Create web app if needed
          if (-not $webAppExists) {
            Write-Host "Creating Windows Web App..."
            az webapp create --name "$(webAppName)-$(projectSuffix)" --resource-group "$(resourceGroupName)" --plan "$(webAppName)-plan" --runtime "NODE|18-lts"
          } else {
            Write-Host "Web App already exists."
          }
      displayName: 'Ensure Windows App Service Exists'

    # Deploy to Azure Web App
    - task: AzureWebApp@1
      inputs:
        azureSubscription: 'Codepush SC'
        appType: 'webApp'
        appName: '$(webAppName)-$(projectSuffix)'
        package: '$(System.ArtifactsDirectory)/drop/codepush.zip'
        deploymentMethod: 'auto'
      displayName: 'Deploy Azure Web App'

    # Configure App Settings
    - task: AzureAppServiceSettings@1
      inputs:
        azureSubscription: 'Codepush SC'
        appName: '$(webAppName)-$(projectSuffix)'
        resourceGroupName: '$(resourceGroupName)'
        appSettings: |
          [
            {
              "name": "NODE_ENV",
              "value": "production",
              "slotSetting": false
            },
            {
              "name": "STORAGE_ACCOUNT_NAME",
              "value": "$(projectSuffix)storage",
              "slotSetting": false
            },
            {
              "name": "EMULATED",
              "value": "false",
              "slotSetting": false
            },
            {
              "name": "HTTPS",
              "value": "true",
              "slotSetting": false
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "18.20.7",
              "slotSetting": false
            },
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "true",
              "slotSetting": false
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "0", 
              "slotSetting": false
            },
            {
              "name": "NODE_PENDING_PIPE_INSTANCES",
              "value": "25",
              "slotSetting": false
            },
            {
              "name": "WEBSITE_OVERRIDE_NODE_DEFAULT_VERSION",
              "value": "18.20.7",
              "slotSetting": false
            },
            {
              "name": "SERVER_URL",
              "value": "$(serverUrl)",
              "slotSetting": false
            },
            {
              "name": "CORS_ORIGIN",
              "value": "$(serverUrl)",
              "slotSetting": false
            },
            {
              "name": "LOGGING",
              "value": "true",
              "slotSetting": false
            },
            {
              "name": "REDIS_HOST",
              "value": "none",
              "slotSetting": false
            },
            {
              "name": "DISABLE_REDIS",
              "value": "true",
              "slotSetting": false
            },
            {
              "name": "WEBSITES_WEBDEPLOY_USE_SCM",
              "value": "false",
              "slotSetting": false
            }
          ]
      displayName: 'Configure App Settings'