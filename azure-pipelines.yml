trigger:
  - main

pool:
  vmImage: 'ubuntu-22.04'  # Use ubuntu-22.04 for better tool compatibility

variables:
  resourceGroupName: 'app-codepush-envimo-prod-ase'
  webAppName: 'codepush'
  projectSuffix: 'ap21'
  azLocation: 'australiasoutheast'
  serverUrl: 'https://$(webAppName)-$(projectSuffix).azurewebsites.net'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    # Build the API server
    - script: |
        cd api
        npm install
        # Ensure specific dependencies are installed
        npm install --no-save express semver body-parser cookie-parser morgan request stream-to-array
        npm run build
      displayName: 'Install dependencies and build'

    # Create deployment package
    - bash: |
        # Create deployment directory
        mkdir -p $(Build.ArtifactStagingDirectory)/deploy
        
        # Copy required files
        cp -r api/bin $(Build.ArtifactStagingDirectory)/deploy/
        cp -r api/node_modules $(Build.ArtifactStagingDirectory)/deploy/
        cp api/package.json $(Build.ArtifactStagingDirectory)/deploy/
        cp api/package-lock.json $(Build.ArtifactStagingDirectory)/deploy/
        cp api/.env.example $(Build.ArtifactStagingDirectory)/deploy/.env
        
        # Install all required dependencies explicitly to ensure they're included
        cd $(Build.ArtifactStagingDirectory)/deploy
        npm install --no-save express semver body-parser cookie-parser morgan request stream-to-array
        
        # Create simplified server.js entry point with dependency check
        cat > $(Build.ArtifactStagingDirectory)/deploy/server.js << 'EOF'
        console.log('Starting code-push-server...');

        const { execSync } = require('child_process');

        // Check for required dependencies
        const missingDeps = [];
        const requiredDeps = [
          'express', 
          'semver', 
          'body-parser', 
          'cookie-parser', 
          'morgan', 
          'request',
          'stream-to-array'
        ];

        for (const dep of requiredDeps) {
          try {
            require.resolve(dep);
            console.log(`${dep} module found`);
          } catch (e) {
            console.log(`${dep} module not found, will install`);
            missingDeps.push(dep);
          }
        }

        // Install any missing dependencies
        if (missingDeps.length > 0) {
          try {
            console.log(`Installing missing dependencies: ${missingDeps.join(', ')}`);
            // First try to install using npm
            try {
              execSync(`npm install --no-save ${missingDeps.join(' ')}`);
              console.log('Dependencies installed successfully');
            } catch (npmError) {
              console.error('Error installing dependencies with npm:', npmError);
              // Fallback to using a pre-installed node_modules directory
              console.log('Attempting to use pre-installed modules...');
            }
          } catch (error) {
            console.error('Error handling dependencies:', error);
            // Continue anyway - the app might still work if the modules are in node_modules
          }
        }

        // Start the main server script
        try {
          require('./bin/script/server');
        } catch (error) {
          console.error('Error starting server:', error);
          // Log more details about the error
          if (error.code === 'MODULE_NOT_FOUND') {
            console.error('Module not found details:', error.requireStack);
          }
          process.exit(1);
        }
        EOF
        
        # Create a package.json with explicit dependencies
        cat > $(Build.ArtifactStagingDirectory)/deploy/package.json << 'EOF'
        {
          "name": "code-push-server",
          "version": "0.5.0",
          "description": "CodePush server",
          "main": "server.js",
          "scripts": {
            "start": "node server.js"
          },
          "dependencies": {
            "express": "^4.17.1",
            "body-parser": "^1.19.0",
            "cookie-parser": "^1.4.5",
            "morgan": "^1.10.0",
            "request": "^2.88.2",
            "semver": "^7.5.4",
            "stream-to-array": "^2.3.0"
          }
        }
        EOF
        
        # Create zip package for deployment
        cd $(Build.ArtifactStagingDirectory)/deploy
        zip -r ../codepush.zip .
      displayName: 'Create Deployment Package'

    # Publish the deployment package as an artifact
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/codepush.zip'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish Deployment Package'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  jobs:
  - deployment: DeployToAzure
    displayName: 'Deploy to Azure Web App'
    environment: Production
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
            displayName: 'Download Build Artifacts'
          
          # Prepare Azure resources
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Codepush SC'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Verify resource group exists
                echo "Verifying resource group exists..."
                resourceGroupName="$(resourceGroupName)"
                resourceGroupExists=$(az group show --name "$resourceGroupName" --query "name" --output tsv 2>/dev/null || echo "")
                if [ -z "$resourceGroupExists" ]; then
                  echo "Resource group '$resourceGroupName' does not exist. Creating it..."
                  az group create --name "$resourceGroupName" --location "$(azLocation)"
                else
                  echo "Resource group '$resourceGroupName' exists."
                fi
                
                # List all app service plans in the subscription to debug
                echo "Listing all App Service Plans in the subscription:"
                az appservice plan list --query "[].{name:name, resourceGroup:resourceGroup, id:id}" -o table
                
                # Delete existing web app if it exists
                webAppName="$(webAppName)-$(projectSuffix)"
                echo "Checking if Web App '$webAppName' exists in resource group '$resourceGroupName'..."
                webAppExists=$(az webapp list --resource-group "$resourceGroupName" --query "[?name=='$webAppName'].name" --output tsv 2>/dev/null || echo "")
                
                if [ -n "$webAppExists" ]; then
                  echo "Deleting existing web app '$webAppName' to ensure clean deployment..."
                  az webapp delete --name "$webAppName" --resource-group "$resourceGroupName"
                  # Wait for deletion to complete
                  sleep 15
                fi
                
                # Create or ensure App Service Plan exists
                appServicePlanName="$(webAppName)-plan-linux"
                echo "Checking if App Service Plan '$appServicePlanName' exists..."
                appServicePlanExists=$(az appservice plan list --resource-group "$resourceGroupName" --query "[?name=='$appServicePlanName'].name" --output tsv 2>/dev/null || echo "")
                
                if [ -z "$appServicePlanExists" ]; then
                  echo "Creating App Service Plan '$appServicePlanName'..."
                  az appservice plan create --name "$appServicePlanName" --resource-group "$resourceGroupName" --is-linux --sku S1 --location "$(azLocation)"
                else
                  echo "App Service Plan '$appServicePlanName' already exists."
                fi
                
                # Create the web app
                echo "Creating Web App '$webAppName'..."
                az webapp create --name "$webAppName" --resource-group "$resourceGroupName" --plan "$appServicePlanName" --runtime "NODE:18-lts"
                
                # Configure app settings
                echo "Configuring app settings..."
                az webapp config appsettings set --name "$webAppName" --resource-group "$resourceGroupName" --settings \
                  NODE_ENV=production \
                  STORAGE_ACCOUNT_NAME="$(projectSuffix)storage" \
                  EMULATED=false \
                  HTTPS=false \
                  WEBSITES_PORT=8080 \
                  SERVER_URL="$(serverUrl)" \
                  CORS_ORIGIN="$(serverUrl)" \
                  LOGGING=true \
                  REDIS_HOST=none \
                  DISABLE_REDIS=true \
                  SCM_DO_BUILD_DURING_DEPLOYMENT=false \
                  WEBSITE_NODE_DEFAULT_VERSION=~18 \
                  WEBSITE_RUN_FROM_PACKAGE=0
                
                # Set startup command
                echo "Setting startup command..."
                az webapp config set --name "$webAppName" --resource-group "$resourceGroupName" --startup-file "node server.js"
            displayName: 'Create and Configure Azure Web App'
          
          # Deploy to the web app
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Codepush SC'
              appType: 'webAppLinux'
              WebAppName: '$(webAppName)-$(projectSuffix)'
              packageForLinux: '$(Pipeline.Workspace)/drop/codepush.zip'
              RuntimeStack: 'NODE|18-lts'
              StartupCommand: 'node server.js'
              DeploymentType: 'zipDeploy'
            displayName: 'Deploy to Azure Web App'
          
          # Verify deployment
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Codepush SC'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                webAppName="$(webAppName)-$(projectSuffix)"
                resourceGroupName="$(resourceGroupName)"
                
                echo "Verifying deployment..."
                status=$(az webapp show --name "$webAppName" --resource-group "$resourceGroupName" --query "state" -o tsv 2>/dev/null || echo "Not found")
                echo "Web app status: $status"
                
                if [ "$status" = "Not found" ]; then
                  echo "Web app was not created successfully."
                  exit 1
                fi
                
                echo "App Service URL: $(serverUrl)"
                
                # Restart the web app to ensure all settings are applied
                echo "Restarting web app to apply all settings..."
                az webapp restart --name "$webAppName" --resource-group "$resourceGroupName"
            displayName: 'Verify Deployment'